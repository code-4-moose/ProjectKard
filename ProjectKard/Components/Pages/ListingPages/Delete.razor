@page "/listings/delete"
@using Microsoft.EntityFrameworkCore
@using ProjectKard.Domain
@inject IDbContextFactory<ProjectKard.Data.ProjectKardContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Listing</h2>
    <hr />
    @if (listing is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@listing.Price</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@listing.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SellerId</dt>
            <dd class="col-sm-10">@listing.SellerId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CardId</dt>
            <dd class="col-sm-10">@listing.CardId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CategoryId</dt>
            <dd class="col-sm-10">@listing.CategoryId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@listing.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@listing.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@listing.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@listing.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="listing" OnValidSubmit="DeleteListing" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(listing is null)">Delete</button> |
            <a href="/listings">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Listing? listing;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        listing = await context.Listing.FirstOrDefaultAsync(m => m.Id == Id);

        if (listing is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteListing()
    {
        using var context = DbFactory.CreateDbContext();
        context.Listing.Remove(listing!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/listings");
    }
}
